        \ '.           .'/
         \  \ .---. .-' /
          '. '     `\_.'
            |(),()  |     ,
            (  __   /   .' \
           .''.___.'--,/\_,|
          {  /     \   }   |
           '.\     /_.'    /
            |'-.-',  `; _.'
            |  |  |   |`
            `""`""`"""` 


               .-. \_/ .-.
               \.-\/=\/.-/
            '-./___|=|___\.-'
           .--| \|/`"`\|/ |--.
          (((_)\  .---.  /(_)))
           `\ \_`-.   .-'_/ /`_
             '.__       __.'(_))
                 /     \     //
                |       |__.'/
                \       /--'`
            .--,-' .--. '----.
           '----`--'  '--`----' 



                ______    __
               / .__. \  /  /
               \__\/__/ /  /
               /      \/  /
            ___|      |__/
           /    \____/    \
          /____/      \____\



              _/\___//
            _/ O   @=
           (__     /\\     ___________
              O   |       /    ____   \
              |   \      /    /    \   \
              \    \----/    /      | /
               \____________/     <oO/


      /\/\ |\
      \ \ \//
      / o_o\
      \____/
      /_\/_\


               __
          ____-  -____
         /            \
        /\____________/\
       /  /´¯\    /¯`\  \
       \  \ º/    \º / /         
        \ .·´¯`v´¯`·. / 
       / \¨\______/¨ /  \  
      |  |¯¯¯¯¯¯¯¯¯¯¯|  |    
      IooI           IooI


       _____   _______
     /       \/   |    \
   / |        |   |    |
  |  \_______/\,__|__, /
   \____/    / _.\|  /._\
   /    \    \_  ,     _/
   |    |      \__|.__/
   \___/_       \!!!!/         ()
    /    \               ___  _/\
    |    |    ____  ___ /   \/ \/
    \____/,,_/    \/   \     \_/
      \     |     |     |\__/                  
       \____\_____/\___/  






                          .''''''.         
                         ;        ;        
                        ;  HP  HP  ;       
                       ;   H   H    ;      
                       ;     ___    ;      
                       ;    (___)   ;      
                       ;            ;      
                       ;            ;      
                      h;            ;g     
                    jg ggh      hgj gggf   
                  og  h   hgfgfj   f  j gh 
                    gh h  h      hg  g

  ______
 / _\_\_\
 \_;  ,()                     ______
  |  |        _______        /\_\_\_\
  \  \       ,       ,       ()    _/
   \  \     /         \       \   _|
    \  \__,/.  .\  /. /\       / /
     \_=____\  ______/\ \_____/ /
             \/_____,| \___==__/

        /\       __
        | \_____/ /
        /         |    
       / ^.   ^   |   
       \0 _   0   |     _
       _\   _   __|    | |
       \/   \  <__|  _/ /
        |       __|_/ _/
        |      <__|__/   
         \______/
         /__||__\ 

               ____
               \__/
       ___    _I///I_    __
       I_I\__/       \__/I_I
         _ )__ ( o )  __(_
       I_I_/ /\_____/\ \_I_I
         _/I/         \I\_
         \ I          I  /


                             ..-----..       
                           .'_        '.    
                          : ( O-_)  .-~~:    
                         :  `-..'   `O_.-:   
                        :   __--~~~~--..  :  
                        :-~~            ~~: 
                        :                 : 
                         :               :  
                          :     ...     :   
                           '.  '...'  .'    
                             ''-----''   


             _____
           ,`o   o \
          ` \____/ ‘
          `,______,`
  ,--------/   \  \____,
  ‘--------|___|__|____/
    /  \   | __  _\
    |  /__\/  \ /  \
    \_____ \  / \  |
           ^^^^ ^^^^




           ___/ 
         /(')(')\
       /\\ \''/ //\
       \/        \/
         \      />
          \_/\_/


       .
      ":"
    ___:____     |"\/"|
  ,'        `.    \  /
  |  O        \___/  |
~^~^~^~^~^~^~^~^~^~^~^~^~


 /\     /\
{  `---'  }
{  O   O  }
~~>  V  <~~
 \  \|/  /
  `-----'____
  /     \    \_
 {       }\  )_\_   _
 |  \_/  |/ /  \_\_/ )
  \__/  /(_/     \__/
    (__/





       )\
       {_}
      .-;-.
     |'-=-'|
     |     |
     | ° ° |
     |     |
     |     |
     '.___.'
 
 
                    __
         .,-;-;-,. /'_\
       _/_/_/_|_\_\) /
     '-<_><_><_><_>=/\
       `/_/====/_/-'\_\
        ""     ""    ""




 ______     __  __     ______     __     __  __          __      ___
/\  ___\   /\ \_\ \   /\  __ \   /\ \   /\_\_\_\        /\ \   /_   \
\ \ \____  \ \  __ \  \ \ \/\ \  \ \ \  \/_/\_\/_      _\_\ \     \  \
 \ \_____\  \ \_\ \_\  \ \_____\  \ \_\   /\_\/\_\    /\_____\     \__\
  \/_____/   \/_/\/_/   \/_____/   \/_/   \/_/\/_/    \/_____/    /___/

 ______     __  __     ______     __     __  __          __     ______        ______    
/\  ___\   /\ \_\ \   /\  __ \   /\ \   /\_\_\_\        /\ \   /\___  \      /\___  \   
\ \ \____  \ \  __ \  \ \ \/\ \  \ \ \  \/_/\_\/_      _\_\ \  \/_/  /__     \ \___  \   
 \ \_____\  \ \_\ \_\  \ \_____\  \ \_\   /\_\/\_\    /\_____\   /\_____\     \ \_____\ 
  \/_____/   \/_/\/_/   \/_____/   \/_/   \/_/\/_/    \/_____/   \/_____/      \/_____/

 ______     __  __     ______     __     __  __          __     __        ______    
/\  ___\   /\ \_\ \   /\  __ \   /\ \   /\_\_\_\        /\ \   /\ \      /\___  \   
\ \ \____  \ \  __ \  \ \ \/\ \  \ \ \  \/_/\_\/_      _\_\ \  \ \ \     \ \___  \   
 \ \_____\  \ \_\ \_\  \ \_____\  \ \_\   /\_\/\_\    /\_____\  \ \_\     \ \_____\ 
  \/_____/   \/_/\/_/   \/_____/   \/_/   \/_/\/_/    \/_____/   \/_/      \/_____/

 ______     __  __     ______     __     __  __        ______    
/\  ___\   /\ \_\ \   /\  __ \   /\ \   /\_\_\_\      /\___  \   
\ \ \____  \ \  __ \  \ \ \/\ \  \ \ \  \/_/\_\/_     \ \___  \   
 \ \_____\  \ \_\ \_\  \ \_____\  \ \_\   /\_\/\_\     \ \_____\ 
  \/_____/   \/_/\/_/   \/_____/   \/_/   \/_/\/_/      \/_____/


  void desactivesaisi() { //empeche de rentrer des caracteres
    struct termios attribut;
    tcgetattr(STDIN_FILENO, &attribut);
    attribut.c_lflag &= ~(ICANON | ECHO); // Désactive saisie ligne et affichage
    tcsetattr(STDIN_FILENO, TCSANOW, &attribut);
}

void activesaisi() { // permet de remettre la saisi de caractere
    struct termios attribut;
    tcgetattr(STDIN_FILENO, &attributs);
    attribut.c_lflag |= (ICANON | ECHO); // Réactive saisie ligne et affichage
    tcsetattr(STDIN_FILENO, TCSANOW, &attribut);
}




int phaseattaque(Poke* joueur1, Poke* joueur2, int actionj1, int actionj2, int tour) {
    desactivesaisi();
    int esquive1=rand()%101;
    int esquive2=rand()%101;
    int reussite1=rand()%101;
    int reussite2=rand()%101;
    if(joueur1->vit>=joueur2->vit) {
        affichagePokepv(joueur1, joueur2, tour);
        printf("%s attaque %s\n", joueur1->name, joueur1->attaque[actionj1]->nom);
        sleep(4);
        if(joueur1->attaque[actionj1]->reussite<reussite1) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a raté son attaque\n", joueur1->name);
            sleep(4);
        } else if(joueur2->agi>=esquive2) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a esquivé l'attaque\n", joueur2->name);
            sleep(4);
        } else {
            joueur2->pvactuel-=(calculerEfficacite(joueur1->type, joueur2->type)*joueur1->attaque[actionj1]->degat)/(joueur2->defactuel)*(joueur1->attactuel);
            if(joueur2->pvactuel<=0) {
                joueur2->pvactuel=0;
            }
            affichagePokepv(joueur1, joueur2, tour);
            sleep(4);
            if(joueur2->pvactuel==0) {
                printf("%s est ko\n", joueur2->name);
                sleep(4);
                gagnantj1();
                return 1;
            }
        }
        affichagePokepv(joueur1, joueur2, tour);
        printf("%s attaque %s\n", joueur2->name, joueur2->attaque[actionj1]->nom);
        sleep(4);
        if(joueur2->attaque[actionj2]->reussite<reussite2) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a raté son attaque\n", joueur2->name);
            sleep(4);
        } else if(joueur1->agi>=esquive1) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a esquivé l'attaque\n", joueur1->name);
            sleep(4);
        } else {
            joueur1->pvactuel-=(calculerEfficacite(joueur2->type, joueur1->type)*joueur2->attaque[actionj2]->degat)/(joueur1->defactuel)*(joueur2->attactuel);
            if(joueur1->pvactuel<=0) {
                joueur1->pvactuel=0;
            }
            affichagePokepv(joueur1, joueur2, tour);
            sleep(4);
            if(joueur1->pvactuel==0) {
                printf("%s est ko\n", joueur1->name);
                sleep(4);
                gagnantj2();
                return 1;
            }
        }
    } else {
        affichagePokepv(joueur1, joueur2, tour);
        printf("%s attaque %s\n", joueur2->name, joueur2->attaque[actionj1]->nom);
        sleep(4);
        if(joueur2->attaque[actionj2]->reussite<reussite2) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a raté son attaque\n", joueur2->name);
            sleep(4);
        } else if(joueur1->agi>=esquive1) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a esquivé l'attaque\n", joueur1->name);
            sleep(4);
        } else {
            joueur1->pvactuel-=(calculerEfficacite(joueur2->type, joueur1->type)*joueur2->attaque[actionj2]->degat)/(joueur1->defactuel)*(joueur2->attactuel);
            if(joueur1->pvactuel<=0) {
                joueur1->pvactuel=0;
            }
            affichagePokepv(joueur1, joueur2, tour);
            sleep(4);
            if(joueur1->pvactuel==0) {
                printf("%s est ko\n", joueur1->name);
                sleep(4);
                gagnantj2();
                return 1;
            }
        }
        affichagePokepv(joueur1, joueur2, tour);
        printf("%s attaque %s\n", joueur1->name, joueur1->attaque[actionj1]->nom);
        sleep(4);
        if(joueur1->attaque[actionj1]->reussite<reussite1) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a raté son attaque\n", joueur1->name);
            sleep(4);
        } else if(joueur2->agi>=esquive2) {
            affichagePokepv(joueur1, joueur2, tour);
            printf("%s a esquivé l'attaque\n", joueur2->name);
            sleep(4);
        } else {
            joueur2->pvactuel-=(calculerEfficacite(joueur1->type, joueur2->type)*joueur1->attaque[actionj1]->degat)/(joueur2->defactuel)*(joueur1->attactuel);
            if(joueur2->pvactuel<=0) {
                joueur2->pvactuel=0;
            }
            affichagePokepv(joueur1, joueur2, tour);
            sleep(4);
            if(joueur2->pvactuel==0) {
                printf("%s est ko\n", joueur2->name);
                sleep(4);
                gagnantj1();
                return 1;
            }
        }
    }
    activesaisi();
    return 0;
}